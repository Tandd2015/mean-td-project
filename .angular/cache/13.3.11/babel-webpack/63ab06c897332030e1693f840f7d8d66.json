{"ast":null,"code":"import { HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PostService = /*#__PURE__*/(() => {\n  class PostService {\n    constructor(_http) {\n      this._http = _http;\n      this.postBaseUrl = '/api/home/posts';\n    }\n    getGooglePosts() {\n      return this._http.get(`${this.postBaseUrl}/all`).pipe(catchError(this.handleServicePostErrorsTwo('getGooglePosts', [])));\n    }\n    getSitePosts() {\n      return this._http.get(`${this.postBaseUrl}/site-only`).pipe(catchError(this.handleServicePostErrorsTwo('getSitePosts', [])));\n    }\n    createPost(post, files) {\n      console.log('service.............Post =  ', post, files);\n      const updatePostAppFormEnd = new FormData();\n      updatePostAppFormEnd.append('content', post.content);\n      updatePostAppFormEnd.append('category', post.category);\n      updatePostAppFormEnd.append('mainImage', files[0] === undefined ? '' : files[0]);\n      updatePostAppFormEnd.append('mainImageO', files[0] === undefined ? post.mainImageO : '');\n      if (files[1].length > 0) {\n        files[1].forEach((file, i) => {\n          updatePostAppFormEnd.append('images', files[1][i]);\n        });\n      } else {\n        updatePostAppFormEnd.append('images', '');\n      }\n      if (files[2].length > 0) {\n        files[2].forEach((file, j) => {\n          updatePostAppFormEnd.append('videos', files[2][j]);\n        });\n      } else {\n        updatePostAppFormEnd.append('videos', '');\n      }\n      const header = new HttpHeaders();\n      const params = new HttpParams();\n      const options = {\n        params,\n        reportProgress: false,\n        headers: header\n      };\n      const request = new HttpRequest('POST', `${this.postBaseUrl}`, updatePostAppFormEnd, options);\n      return this._http.request(request).pipe(catchError(this.handleServicePostErrorsTwo(`updatePost id=${post._id}`)));\n    }\n    getPost(postId) {\n      return this._http.get(`${this.postBaseUrl}/single/${postId}`).pipe(catchError(this.handleServicePostErrorsTwo(`getPost id=${postId}`)));\n    }\n    updatePost(post, files) {\n      const updatePostAppFormEnd = new FormData();\n      updatePostAppFormEnd.append('content', post.content);\n      updatePostAppFormEnd.append('category', post.category);\n      updatePostAppFormEnd.append('writtenBy', post.writtenBy);\n      updatePostAppFormEnd.append('likes', post.likes);\n      updatePostAppFormEnd.append('newObject', post.newObject);\n      updatePostAppFormEnd.append('mainImage', files[0] === undefined ? '' : files[0]);\n      if (files[1].length > 0) {\n        files[1].forEach((file, i) => {\n          updatePostAppFormEnd.append('images', files[1][i]);\n        });\n      } else {\n        updatePostAppFormEnd.append('images', '');\n      }\n      if (files[2].length > 0) {\n        files[2].forEach((file, j) => {\n          updatePostAppFormEnd.append('videos', files[2][j]);\n        });\n      } else {\n        updatePostAppFormEnd.append('videos', '');\n      }\n      const header = new HttpHeaders();\n      const params = new HttpParams();\n      const options = {\n        params,\n        reportProgress: false,\n        headers: header\n      };\n      const request = new HttpRequest('PUT', `${this.postBaseUrl}/${post._id}`, updatePostAppFormEnd, options);\n      return this._http.request(request).pipe(catchError(this.handleServicePostErrorsTwo(`updatePost id=${post._id}`)));\n    }\n    removePost(postId) {\n      return this._http.delete(`${this.postBaseUrl}/${postId}`).pipe(catchError(this.handleServicePostErrorsTwo(`removePost id=${postId}`)));\n    }\n    handleServicePostErrorsTwo(operation = 'operation', result) {\n      return error => {\n        // console logging the error\n        console.error(`${operation} failed: ${error.message}`);\n        // app continues running with empty result returned\n        return of(result);\n      };\n    }\n  }\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostService;\n})();","map":null,"metadata":{},"sourceType":"module"}