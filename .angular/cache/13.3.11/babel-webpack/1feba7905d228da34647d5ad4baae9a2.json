{"ast":null,"code":"import { HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { MessageService } from './';\nexport let ReviewService = /*#__PURE__*/(() => {\n  class ReviewService {\n    // public httpOptions = {\n    //   headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n    // };\n    constructor(_http) {\n      this._http = _http;\n      // public serviceReviewsErrors: string[] = [];\n      this.reviewBaseUrl = '/api/home/reviews';\n    }\n    getGoogleReviews() {\n      return this._http.get(`${this.reviewBaseUrl}/all`).pipe(catchError(this.handleServiceReviewErrorsTwo('getGoogleReviews', [])));\n    }\n    getSiteReviews() {\n      return this._http.get(`${this.reviewBaseUrl}/site-only`).pipe(catchError(this.handleServiceReviewErrorsTwo('getSiteReviews', [])));\n    }\n    // createReview(review: ReviewApp, file: File): Observable<ReviewApp> {\n    //   return this._http.post<ReviewApp>(this.reviewBaseUrl, review).pipe(\n    //     catchError(this.handleServiceReviewErrorsTwo<ReviewApp>(`createReview`))\n    //   );\n    // }\n    createReview(review, file) {\n      const newReviewAppFormEnd = new FormData();\n      newReviewAppFormEnd.append('content', review.content);\n      newReviewAppFormEnd.append('writtenBy', review.writtenBy);\n      newReviewAppFormEnd.append('byRating', review.byRating.toString());\n      newReviewAppFormEnd.append('byImage', file);\n      const header = new HttpHeaders();\n      const params = new HttpParams();\n      const options = {\n        params,\n        reportProgress: false,\n        headers: header\n      };\n      const request = new HttpRequest('POST', this.reviewBaseUrl, newReviewAppFormEnd, options);\n      return this._http.request(request).pipe(catchError(this.handleServiceReviewErrorsTwo(`createReview`)));\n    }\n    getReview(reviewId) {\n      return this._http.get(`${this.reviewBaseUrl}/single/${reviewId}`).pipe(catchError(this.handleServiceReviewErrorsTwo(`getReview id=${reviewId}`)));\n    }\n    updateReview(review) {\n      return this._http.put(`${this.reviewBaseUrl}/${review._id}`, review).pipe(catchError(this.handleServiceReviewErrorsTwo(`updateReview id=${review._id}`)));\n    }\n    removeReview(reviewId) {\n      return this._http.delete(`${this.reviewBaseUrl}/${reviewId}`).pipe(catchError(this.handleServiceReviewErrorsTwo(`removeReview id=${reviewId}`)));\n    }\n    // private handleServiceReviewErrors(errors: string[] | string): void {\n    //   this.serviceReviewsErrors = Array.isArray(errors) ? errors : [errors];\n    // }\n    handleServiceReviewErrorsTwo(operation = 'operation', result) {\n      return error => {\n        // console logging the error\n        console.error(`${operation} failed: ${error.message}`);\n        // send error to remote logging infrastruce\n        // formatting error to be better readable for humans\n        // this.log(`${operation} failed: ${error.message}`);\n        // app continues running with empty result returned\n        return of(result);\n      };\n    }\n  }\n  ReviewService.ɵfac = function ReviewService_Factory(t) {\n    return new (t || ReviewService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ReviewService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReviewService,\n    factory: ReviewService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReviewService;\n})();","map":null,"metadata":{},"sourceType":"module"}