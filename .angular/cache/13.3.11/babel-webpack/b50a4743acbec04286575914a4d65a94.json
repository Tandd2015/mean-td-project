{"ast":null,"code":"import { HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SectionService = /*#__PURE__*/(() => {\n  class SectionService {\n    constructor(_http) {\n      this._http = _http;\n      this.sectionBaseUrl = '/api/home/sections';\n    }\n    getSections() {\n      return this._http.get(`${this.sectionBaseUrl}/all`).pipe(catchError(this.handleServiceSectionErrors('getSections', [])));\n    }\n    createSection(section, file) {\n      const newSectionFormEnd = new FormData();\n      newSectionFormEnd.append('title', section.title);\n      newSectionFormEnd.append('content', section.content);\n      newSectionFormEnd.append('sectionImageAttributionCredit', section.sectionImageAttributionCredit);\n      newSectionFormEnd.append('sectionImageAttributionLink', section.sectionImageAttributionLink);\n      newSectionFormEnd.append('sectionImage', file);\n      const header = new HttpHeaders();\n      const params = new HttpParams();\n      const options = {\n        params,\n        reportProgress: false,\n        headers: header\n      };\n      const request = new HttpRequest('POST', this.sectionBaseUrl, newSectionFormEnd, options);\n      return this._http.request(request).pipe(catchError(this.handleServiceSectionErrors(`createSection`)));\n    }\n    getSection(sectionId) {\n      return this._http.get(`${this.sectionBaseUrl}/single/${sectionId}`).pipe(catchError(this.handleServiceSectionErrors(`getSection id=${sectionId}`)));\n    }\n    updateSection(section) {\n      return this._http.put(`${this.sectionBaseUrl}/${section._id}`, section).pipe(catchError(this.handleServiceSectionErrors(`updateSection id=${section._id}`)));\n    }\n    removeSection(sectionId) {\n      return this._http.delete(`${this.sectionBaseUrl}/${sectionId}`).pipe(catchError(this.handleServiceSectionErrors(`removeSection id=${sectionId}`)));\n    }\n    handleServiceSectionErrors(operation = 'operation', result) {\n      return error => {\n        // console logging the error\n        console.error(`${operation} failed: ${error.message}`);\n        // send error to remote logging infrastruce\n        // formatting error to be better readable for humans\n        // this.log(`${operation} failed: ${error.message}`);\n        // app continues running with empty result returned\n        return of(result);\n      };\n    }\n  }\n  SectionService.ɵfac = function SectionService_Factory(t) {\n    return new (t || SectionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SectionService,\n    factory: SectionService.ɵfac,\n    providedIn: 'root'\n  });\n  return SectionService;\n})();","map":null,"metadata":{},"sourceType":"module"}